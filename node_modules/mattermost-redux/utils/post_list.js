"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makePreparePostIdsForPostList = makePreparePostIdsForPostList;
exports.makeFilterPostsAndAddSeparators = makeFilterPostsAndAddSeparators;
exports.makeCombineUserActivityPosts = makeCombineUserActivityPosts;
exports.isStartOfNewMessages = isStartOfNewMessages;
exports.isDateLine = isDateLine;
exports.getDateForDateLine = getDateForDateLine;
exports.isCombinedUserActivityPost = isCombinedUserActivityPost;
exports.getPostIdsForCombinedUserActivityPost = getPostIdsForCombinedUserActivityPost;
exports.getFirstPostId = getFirstPostId;
exports.getLastPostId = getLastPostId;
exports.getLastPostIndex = getLastPostIndex;
exports.makeGenerateCombinedPost = makeGenerateCombinedPost;
exports.comparePostTypes = comparePostTypes;
exports.combineUserActivitySystemPost = combineUserActivitySystemPost;
exports.postTypePriority = exports.MAX_COMBINED_SYSTEM_POSTS = exports.START_OF_NEW_MESSAGES = exports.DATE_LINE = exports.COMBINED_USER_ACTIVITY = void 0;

require("core-js/modules/es7.object.get-own-property-descriptors");

require("core-js/modules/es6.string.iterator");

require("core-js/modules/es6.array.from");

require("core-js/modules/es6.regexp.to-string");

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es7.array.includes");

require("core-js/modules/es6.string.includes");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es7.object.entries");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.regexp.split");

require("core-js/modules/es6.string.starts-with");

var _reselect = require("reselect");

var _momentTimezone = _interopRequireDefault(require("moment-timezone"));

var _constants = require("../constants");

var _posts = require("../selectors/entities/posts");

var _preferences = require("../selectors/entities/preferences");

var _timezone = require("../selectors/entities/timezone");

var _users2 = require("../selectors/entities/users");

var _helpers = require("./helpers");

var _post_utils = require("./post_utils");

var _timezone_utils = require("./timezone_utils");

var _postTypePriority;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var COMBINED_USER_ACTIVITY = 'user-activity-';
exports.COMBINED_USER_ACTIVITY = COMBINED_USER_ACTIVITY;
var DATE_LINE = 'date-';
exports.DATE_LINE = DATE_LINE;
var START_OF_NEW_MESSAGES = 'start-of-new-messages';
exports.START_OF_NEW_MESSAGES = START_OF_NEW_MESSAGES;
var MAX_COMBINED_SYSTEM_POSTS = 100;
exports.MAX_COMBINED_SYSTEM_POSTS = MAX_COMBINED_SYSTEM_POSTS;

function shouldShowJoinLeaveMessages(state) {
  // This setting is true or not set if join/leave messages are to be displayed
  return (0, _preferences.getBool)(state, _constants.Preferences.CATEGORY_ADVANCED_SETTINGS, _constants.Preferences.ADVANCED_FILTER_JOIN_LEAVE, true);
}

function makePreparePostIdsForPostList() {
  var filterPostsAndAddSeparators = makeFilterPostsAndAddSeparators();
  var combineUserActivityPosts = makeCombineUserActivityPosts();
  return function (state, options) {
    var postIds = filterPostsAndAddSeparators(state, options);
    postIds = combineUserActivityPosts(state, postIds);
    return postIds;
  };
} // Returns a selector that, given the state and an object containing an array of postIds and an optional
// timestamp of when the channel was last read, returns a memoized array of postIds interspersed with
// day indicators and an optional new message indicator.


function makeFilterPostsAndAddSeparators() {
  var getPostsForIds = (0, _posts.makeGetPostsForIds)();
  return (0, _helpers.createIdsSelector)(function (state, _ref) {
    var postIds = _ref.postIds;
    return getPostsForIds(state, postIds);
  }, function (state, _ref2) {
    var lastViewedAt = _ref2.lastViewedAt;
    return lastViewedAt;
  }, function (state, _ref3) {
    var indicateNewMessages = _ref3.indicateNewMessages;
    return indicateNewMessages;
  }, function (state) {
    return state.entities.posts.selectedPostId;
  }, _users2.getCurrentUser, shouldShowJoinLeaveMessages, _timezone.isTimezoneEnabled, function (posts, lastViewedAt, indicateNewMessages, selectedPostId, currentUser, showJoinLeave, timeZoneEnabled) {
    if (posts.length === 0 || !currentUser) {
      return [];
    }

    var out = [];
    var lastDate = null;
    var addedNewMessagesIndicator = false; // Iterating through the posts from oldest to newest

    for (var i = posts.length - 1; i >= 0; i--) {
      var post = posts[i];

      if (!post || post.type === _constants.Posts.POST_TYPES.EPHEMERAL_ADD_TO_CHANNEL && !selectedPostId) {
        continue;
      } // Filter out join/leave messages if necessary


      if ((0, _post_utils.shouldFilterJoinLeavePost)(post, showJoinLeave, currentUser.username)) {
        continue;
      } // Push on a date header if the last post was on a different day than the current one


      var postDate = new Date(post.create_at);

      if (timeZoneEnabled) {
        var currentOffset = postDate.getTimezoneOffset() * 60 * 1000;
        var timezone = (0, _timezone_utils.getUserCurrentTimezone)(currentUser.timezone);

        if (timezone) {
          var timezoneOffset = _momentTimezone.default.tz.zone(timezone).utcOffset(post.create_at) * 60 * 1000;
          postDate.setTime(post.create_at + (currentOffset - timezoneOffset));
        }
      }

      postDate.setHours(0, 0, 0, 0);

      if (!lastDate || lastDate.toDateString() !== postDate.toDateString()) {
        out.push(DATE_LINE + postDate.getTime());
        lastDate = postDate;
      }

      if (lastViewedAt && post.create_at > lastViewedAt && post.user_id !== currentUser.id && !addedNewMessagesIndicator && indicateNewMessages) {
        out.push(START_OF_NEW_MESSAGES);
        addedNewMessagesIndicator = true;
      }

      out.push(post.id);
    } // Flip it back to newest to oldest


    return out.reverse();
  });
}

function makeCombineUserActivityPosts() {
  return (0, _helpers.createIdsSelector)(function (state, postIds) {
    return postIds;
  }, function (state) {
    return state.entities.posts.posts;
  }, function (postIds, posts) {
    var lastPostIsUserActivity = false;
    var combinedCount = 0;
    var out = [];
    var changed = false;

    for (var i = 0; i < postIds.length; i++) {
      var postId = postIds[i];

      if (postId === START_OF_NEW_MESSAGES || postId.startsWith(DATE_LINE)) {
        // Not a post, so it won't be combined
        out.push(postId);
        lastPostIsUserActivity = false;
        combinedCount = 0;
        continue;
      }

      var post = posts[postId];
      var postIsUserActivity = (0, _post_utils.isUserActivityPost)(post.type);

      if (postIsUserActivity && lastPostIsUserActivity && combinedCount < MAX_COMBINED_SYSTEM_POSTS) {
        // Add the ID to the previous combined post
        out[out.length - 1] += '_' + postId;
        combinedCount += 1;
        changed = true;
      } else if (postIsUserActivity) {
        // Start a new combined post, even if the "combined" post is only a single post
        out.push(COMBINED_USER_ACTIVITY + postId);
        combinedCount = 1;
        changed = true;
      } else {
        out.push(postId);
        combinedCount = 0;
      }

      lastPostIsUserActivity = postIsUserActivity;
    }

    if (!changed) {
      // Nothing was combined, so return the original array
      return postIds;
    }

    return out;
  });
}

function isStartOfNewMessages(item) {
  return item === START_OF_NEW_MESSAGES;
}

function isDateLine(item) {
  return item.startsWith(DATE_LINE);
}

function getDateForDateLine(item) {
  return parseInt(item.substring(DATE_LINE.length), 10);
}

function isCombinedUserActivityPost(item) {
  return /^user-activity-(?:[^_]+_)*[^_]+$/.test(item);
}

function getPostIdsForCombinedUserActivityPost(item) {
  return item.substring(COMBINED_USER_ACTIVITY.length).split('_');
}

function getFirstPostId(items) {
  for (var i = 0; i < items.length; i++) {
    var item = items[i];

    if (isStartOfNewMessages(item) || isDateLine(item)) {
      // This is not a post at all
      continue;
    }

    if (isCombinedUserActivityPost(item)) {
      // This is a combined post, so find the first post ID from it
      var combinedIds = getPostIdsForCombinedUserActivityPost(item);
      return combinedIds[0];
    } // This is a post ID


    return item;
  }

  return '';
}

function getLastPostId(items) {
  for (var i = items.length - 1; i >= 0; i--) {
    var item = items[i];

    if (isStartOfNewMessages(item) || isDateLine(item)) {
      // This is not a post at all
      continue;
    }

    if (isCombinedUserActivityPost(item)) {
      // This is a combined post, so find the first post ID from it
      var combinedIds = getPostIdsForCombinedUserActivityPost(item);
      return combinedIds[combinedIds.length - 1];
    } // This is a post ID


    return item;
  }

  return '';
}

function getLastPostIndex(postIds) {
  var index = 0;

  for (var i = postIds.length - 1; i > 0; i--) {
    var item = postIds[i];

    if (!isStartOfNewMessages(item) && !isDateLine(item)) {
      index = i;
      break;
    }
  }

  return index;
}

function makeGenerateCombinedPost() {
  var getPostsForIds = (0, _posts.makeGetPostsForIds)();
  var getPostIds = (0, _helpers.memoizeResult)(getPostIdsForCombinedUserActivityPost);
  return (0, _reselect.createSelector)(function (state, combinedId) {
    return combinedId;
  }, function (state, combinedId) {
    return getPostsForIds(state, getPostIds(combinedId));
  }, function (combinedId, posts) {
    // All posts should be in the same channel
    var channelId = posts[0].channel_id; // Assume that the last post is the oldest one

    var createAt = posts[posts.length - 1].create_at;
    var messages = posts.map(function (post) {
      return post.message;
    });
    return {
      id: combinedId,
      root_id: '',
      channel_id: channelId,
      create_at: createAt,
      delete_at: 0,
      message: messages.join('\n'),
      props: {
        messages: messages,
        user_activity: combineUserActivitySystemPost(posts)
      },
      state: '',
      system_post_ids: posts.map(function (post) {
        return post.id;
      }),
      type: _constants.Posts.POST_TYPES.COMBINED_USER_ACTIVITY,
      user_activity_posts: posts,
      user_id: '',
      metadata: {}
    };
  });
}

var postTypePriority = (_postTypePriority = {}, _defineProperty(_postTypePriority, _constants.Posts.POST_TYPES.JOIN_TEAM, 0), _defineProperty(_postTypePriority, _constants.Posts.POST_TYPES.ADD_TO_TEAM, 1), _defineProperty(_postTypePriority, _constants.Posts.POST_TYPES.LEAVE_TEAM, 2), _defineProperty(_postTypePriority, _constants.Posts.POST_TYPES.REMOVE_FROM_TEAM, 3), _defineProperty(_postTypePriority, _constants.Posts.POST_TYPES.JOIN_CHANNEL, 4), _defineProperty(_postTypePriority, _constants.Posts.POST_TYPES.ADD_TO_CHANNEL, 5), _defineProperty(_postTypePriority, _constants.Posts.POST_TYPES.LEAVE_CHANNEL, 6), _defineProperty(_postTypePriority, _constants.Posts.POST_TYPES.REMOVE_FROM_CHANNEL, 7), _defineProperty(_postTypePriority, _constants.Posts.POST_TYPES.PURPOSE_CHANGE, 8), _defineProperty(_postTypePriority, _constants.Posts.POST_TYPES.HEADER_CHANGE, 9), _defineProperty(_postTypePriority, _constants.Posts.POST_TYPES.JOIN_LEAVE, 10), _defineProperty(_postTypePriority, _constants.Posts.POST_TYPES.DISPLAYNAME_CHANGE, 11), _defineProperty(_postTypePriority, _constants.Posts.POST_TYPES.CONVERT_CHANNEL, 12), _defineProperty(_postTypePriority, _constants.Posts.POST_TYPES.CHANNEL_DELETED, 13), _defineProperty(_postTypePriority, _constants.Posts.POST_TYPES.ADD_REMOVE, 14), _defineProperty(_postTypePriority, _constants.Posts.POST_TYPES.EPHEMERAL, 15), _postTypePriority);
exports.postTypePriority = postTypePriority;

function comparePostTypes(a, b) {
  return postTypePriority[a.postType] - postTypePriority[b.postType];
}

function extractUserActivityData(userActivities) {
  var messageData = [];
  var allUserIds = [];
  var allUsernames = [];
  Object.entries(userActivities).forEach(function (_ref4) {
    var _ref5 = _slicedToArray(_ref4, 2),
        postType = _ref5[0],
        values = _ref5[1];

    if (postType === _constants.Posts.POST_TYPES.ADD_TO_TEAM || postType === _constants.Posts.POST_TYPES.ADD_TO_CHANNEL || postType === _constants.Posts.POST_TYPES.REMOVE_FROM_CHANNEL) {
      Object.keys(values).map(function (key) {
        return [key, values[key]];
      }).forEach(function (_ref6) {
        var _ref7 = _slicedToArray(_ref6, 2),
            actorId = _ref7[0],
            users = _ref7[1];

        if (Array.isArray(users)) {
          throw new Error('Invalid Post activity data');
        }

        var ids = users.ids,
            usernames = users.usernames;
        messageData.push({
          postType: postType,
          userIds: [].concat(_toConsumableArray(usernames), _toConsumableArray(ids)),
          actorId: actorId
        });

        if (ids.length > 0) {
          allUserIds.push.apply(allUserIds, _toConsumableArray(ids));
        }

        if (usernames.length > 0) {
          allUsernames.push.apply(allUsernames, _toConsumableArray(usernames));
        }

        allUserIds.push(actorId);
      });
    } else {
      if (!Array.isArray(values)) {
        throw new Error('Invalid Post activity data');
      }

      messageData.push({
        postType: postType,
        userIds: values
      });
      allUserIds.push.apply(allUserIds, _toConsumableArray(values));
    }
  });
  messageData.sort(comparePostTypes);

  function reduceUsers(acc, curr) {
    if (!acc.includes(curr)) {
      acc.push(curr);
    }

    return acc;
  }

  return {
    allUserIds: allUserIds.reduce(reduceUsers, []),
    allUsernames: allUsernames.reduce(reduceUsers, []),
    messageData: messageData
  };
}

function combineUserActivitySystemPost() {
  var systemPosts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  if (systemPosts.length === 0) {
    return null;
  }

  var userActivities = systemPosts.reduce(function (acc, post) {
    var postType = post.type;
    var userActivityProps = acc;
    var combinedPostType = userActivityProps[postType];

    if (postType === _constants.Posts.POST_TYPES.ADD_TO_TEAM || postType === _constants.Posts.POST_TYPES.ADD_TO_CHANNEL || postType === _constants.Posts.POST_TYPES.REMOVE_FROM_CHANNEL) {
      var userId = post.props.addedUserId || post.props.removedUserId;
      var username = post.props.addedUsername || post.props.removedUsername;

      if (combinedPostType) {
        if (Array.isArray(combinedPostType[post.user_id])) {
          throw new Error('Invalid Post activity data');
        }

        var users = combinedPostType[post.user_id] || {
          ids: [],
          usernames: []
        };

        if (userId) {
          if (!users.ids.includes(userId)) {
            users.ids.push(userId);
          }
        } else if (username && !users.usernames.includes(username)) {
          users.usernames.push(username);
        }

        combinedPostType[post.user_id] = users;
      } else {
        var _users = {
          ids: [],
          usernames: []
        };

        if (userId) {
          _users.ids.push(userId);
        } else if (username) {
          _users.usernames.push(username);
        }

        userActivityProps[postType] = _defineProperty({}, post.user_id, _users);
      }
    } else {
      var propsUserId = post.user_id;

      if (combinedPostType) {
        if (!Array.isArray(combinedPostType)) {
          throw new Error('Invalid Post activity data');
        }

        if (!combinedPostType.includes(propsUserId)) {
          userActivityProps[postType] = [].concat(_toConsumableArray(combinedPostType), [propsUserId]);
        }
      } else {
        userActivityProps = _objectSpread({}, userActivityProps, _defineProperty({}, postType, [propsUserId]));
      }
    }

    return userActivityProps;
  }, {});
  return extractUserActivityData(userActivities);
}