"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAllGroups = getAllGroups;
exports.getGroup = getGroup;
exports.getGroupMemberCount = getGroupMemberCount;
exports.getGroupTeams = getGroupTeams;
exports.getGroupChannels = getGroupChannels;
exports.getGroupMembers = getGroupMembers;
exports.getGroupsAssociatedToChannel = exports.getGroupsNotAssociatedToChannel = exports.getGroupsAssociatedToTeam = exports.getGroupsNotAssociatedToTeam = void 0;

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es7.object.entries");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.string.iterator");

require("core-js/modules/es6.set");

var _reselect = require("reselect");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var emptyList = [];
var emptySyncables = {
  teams: [],
  channels: []
};

function getAllGroups(state) {
  return state.entities.groups.groups;
}

function getGroup(state, id) {
  return getAllGroups(state)[id];
}

function getGroupMemberCount(state, id) {
  var memberData = state.entities.groups.members;
  var groupMemberData = memberData[id];

  if (!groupMemberData) {
    return 0;
  }

  return memberData[id].totalMemberCount;
}

function getGroupSyncables(state, id) {
  return state.entities.groups.syncables[id] || emptySyncables;
}

function getGroupTeams(state, id) {
  return getGroupSyncables(state, id).teams;
}

function getGroupChannels(state, id) {
  return getGroupSyncables(state, id).channels;
}

function getGroupMembers(state, id) {
  var groupMemberData = state.entities.groups.members[id];

  if (!groupMemberData) {
    return emptyList;
  }

  return groupMemberData.members;
}

var teamGroupIDs = function teamGroupIDs(state, teamID) {
  return state.entities.teams.groupsAssociatedToTeam[teamID] || [];
};

var channelGroupIDs = function channelGroupIDs(state, channelID) {
  return state.entities.channels.groupsAssociatedToChannel[channelID] || [];
};

var getTeamGroupIDSet = (0, _reselect.createSelector)(teamGroupIDs, function (teamIDs) {
  return new Set(teamIDs);
});
var getChannelGroupIDSet = (0, _reselect.createSelector)(channelGroupIDs, function (channelIDs) {
  return new Set(channelIDs);
});
var getGroupsNotAssociatedToTeam = (0, _reselect.createSelector)(getAllGroups, function (state, teamID) {
  return getTeamGroupIDSet(state, teamID);
}, function (allGroups, teamGroupIDSet) {
  return Object.entries(allGroups).filter(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        groupID = _ref2[0];

    return !teamGroupIDSet.has(groupID);
  }).map(function (entry) {
    return entry[1];
  });
});
exports.getGroupsNotAssociatedToTeam = getGroupsNotAssociatedToTeam;
var getGroupsAssociatedToTeam = (0, _reselect.createSelector)(getAllGroups, function (state, teamID) {
  return getTeamGroupIDSet(state, teamID);
}, function (allGroups, teamGroupIDSet) {
  return Object.entries(allGroups).filter(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 1),
        groupID = _ref4[0];

    return teamGroupIDSet.has(groupID);
  }).map(function (entry) {
    return entry[1];
  });
});
exports.getGroupsAssociatedToTeam = getGroupsAssociatedToTeam;
var getGroupsNotAssociatedToChannel = (0, _reselect.createSelector)(getAllGroups, function (state, channelID) {
  return getChannelGroupIDSet(state, channelID);
}, function (allGroups, channelGroupIDSet) {
  return Object.entries(allGroups).filter(function (_ref5) {
    var _ref6 = _slicedToArray(_ref5, 1),
        groupID = _ref6[0];

    return !channelGroupIDSet.has(groupID);
  }).map(function (entry) {
    return entry[1];
  });
});
exports.getGroupsNotAssociatedToChannel = getGroupsNotAssociatedToChannel;
var getGroupsAssociatedToChannel = (0, _reselect.createSelector)(getAllGroups, function (state, channelID) {
  return getChannelGroupIDSet(state, channelID);
}, function (allGroups, channelGroupIDSet) {
  return Object.entries(allGroups).filter(function (_ref7) {
    var _ref8 = _slicedToArray(_ref7, 1),
        groupID = _ref8[0];

    return channelGroupIDSet.has(groupID);
  }).map(function (entry) {
    return entry[1];
  });
});
exports.getGroupsAssociatedToChannel = getGroupsAssociatedToChannel;