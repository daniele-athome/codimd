"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
function ssecMiddleware(_a) {
    var _this = this;
    var utf8Decoder = _a.utf8Decoder, base64Encoder = _a.base64Encoder, hashConstructor = _a.hashConstructor, ssecProperties = _a.ssecProperties;
    return function (next, context) { return function (_a) {
        var input = _a.input;
        return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var e_1, _b, _c, _d, _e, sourceProperty, value, _f, targetProperty, hashTargetProperty, valueView, encoded, hash, _g, _h, _j, e_1_1;
            return tslib_1.__generator(this, function (_k) {
                switch (_k.label) {
                    case 0:
                        _k.trys.push([0, 5, 6, 7]);
                        _d = tslib_1.__values(Object.keys(ssecProperties)), _e = _d.next();
                        _k.label = 1;
                    case 1:
                        if (!!_e.done) return [3 /*break*/, 4];
                        sourceProperty = _e.value;
                        value = input[sourceProperty];
                        if (!value) return [3 /*break*/, 3];
                        _f = ssecProperties[sourceProperty], targetProperty = _f.targetProperty, hashTargetProperty = _f.hashTargetProperty;
                        valueView = ArrayBuffer.isView(value)
                            ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength)
                            : typeof value === "string"
                                ? utf8Decoder(value)
                                : new Uint8Array(value);
                        encoded = base64Encoder(valueView);
                        hash = new hashConstructor();
                        hash.update(valueView);
                        _g = [{}, input];
                        _c = {}, _c[targetProperty] = encoded;
                        _h = hashTargetProperty;
                        _j = base64Encoder;
                        return [4 /*yield*/, hash.digest()];
                    case 2:
                        input = tslib_1.__assign.apply(void 0, _g.concat([(_c[_h] = _j.apply(void 0, [_k.sent()]), _c)]));
                        _k.label = 3;
                    case 3:
                        _e = _d.next();
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        e_1_1 = _k.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 7];
                    case 6:
                        try {
                            if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/, next({
                            input: input
                        })];
                }
            });
        });
    }; };
}
exports.ssecMiddleware = ssecMiddleware;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBeUJBLFNBQWdCLGNBQWMsQ0FBdUIsRUFLaEI7SUFMckMsaUJBc0NDO1FBckNDLDRCQUFXLEVBQ1gsZ0NBQWEsRUFDYixvQ0FBZSxFQUNmLGtDQUFjO0lBRWQsT0FBTyxVQUNMLElBQTRCLEVBQzVCLE9BQWdDLElBQ0wsT0FBQSxVQUFPLEVBRVY7WUFEeEIsZ0JBQUs7Ozs7Ozs7d0JBRXdCLEtBQUEsaUJBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQTs7Ozt3QkFBN0MsY0FBYzt3QkFDakIsS0FBSyxHQUE0QixLQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7NkJBQ2pFLEtBQUssRUFBTCx3QkFBSzt3QkFDRCxLQUEwQyxjQUFzQixDQUNwRSxjQUFjLENBQ2YsRUFGTyxjQUFjLG9CQUFBLEVBQUUsa0JBQWtCLHdCQUFBLENBRXhDO3dCQUNJLFNBQVMsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQzs0QkFDekMsQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDOzRCQUNsRSxDQUFDLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUTtnQ0FDM0IsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7Z0NBQ3BCLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDcEIsT0FBTyxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDbkMsSUFBSSxHQUFHLElBQUksZUFBZSxFQUFFLENBQUM7d0JBQ25DLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7a0NBRWpCLEtBQWE7b0NBQ2hCLGNBQWMsSUFBRyxPQUFPO3dCQUN4QixLQUFBLGtCQUFrQixDQUFBO3dCQUFHLEtBQUEsYUFBYSxDQUFBO3dCQUFDLHFCQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBQTs7d0JBSHpELEtBQUssdURBR21CLGtCQUFjLFNBQW1CLEVBQUMsUUFDekQsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs0QkFJTixzQkFBTyxJQUFJLENBQUM7NEJBQ1YsS0FBSyxPQUFBO3lCQUNOLENBQUMsRUFBQzs7OztLQUNKLEVBNUI0QixDQTRCNUIsQ0FBQztBQUNKLENBQUM7QUF0Q0Qsd0NBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGVjb2RlcixcbiAgRW5jb2RlcixcbiAgSGFuZGxlcixcbiAgSGFuZGxlckFyZ3VtZW50cyxcbiAgSGFuZGxlckV4ZWN1dGlvbkNvbnRleHQsXG4gIEhhc2gsXG4gIE1pZGRsZXdhcmUsXG4gIFNvdXJjZURhdGFcbn0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5cbmV4cG9ydCB0eXBlIFNzZWNQcm9wZXJ0aWVzQ29uZmlndXJhdGlvbjxJbnB1dCBleHRlbmRzIG9iamVjdD4gPSB7XG4gIFtzb3VyY2VQcm9wZXJ0eSBpbiBrZXlvZiBJbnB1dF0/OiB7XG4gICAgdGFyZ2V0UHJvcGVydHk6IHN0cmluZztcbiAgICBoYXNoVGFyZ2V0UHJvcGVydHk6IHN0cmluZztcbiAgfTtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3NlY01pZGRsZXdhcmVDb25maWd1cmF0aW9uPElucHV0IGV4dGVuZHMgb2JqZWN0PiB7XG4gIHV0ZjhEZWNvZGVyOiBEZWNvZGVyO1xuICBiYXNlNjRFbmNvZGVyOiBFbmNvZGVyO1xuICBoYXNoQ29uc3RydWN0b3I6IHsgbmV3ICgpOiBIYXNoIH07XG4gIHNzZWNQcm9wZXJ0aWVzOiBTc2VjUHJvcGVydGllc0NvbmZpZ3VyYXRpb248SW5wdXQ+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3NlY01pZGRsZXdhcmU8SW5wdXQgZXh0ZW5kcyBvYmplY3Q+KHtcbiAgdXRmOERlY29kZXIsXG4gIGJhc2U2NEVuY29kZXIsXG4gIGhhc2hDb25zdHJ1Y3RvcixcbiAgc3NlY1Byb3BlcnRpZXNcbn06IFNzZWNNaWRkbGV3YXJlQ29uZmlndXJhdGlvbjxJbnB1dD4pOiBNaWRkbGV3YXJlPElucHV0LCBhbnk+IHtcbiAgcmV0dXJuIDxPdXRwdXQgZXh0ZW5kcyBvYmplY3Q+KFxuICAgIG5leHQ6IEhhbmRsZXI8SW5wdXQsIE91dHB1dD4sXG4gICAgY29udGV4dDogSGFuZGxlckV4ZWN1dGlvbkNvbnRleHRcbiAgKTogSGFuZGxlcjxJbnB1dCwgT3V0cHV0PiA9PiBhc3luYyAoe1xuICAgIGlucHV0XG4gIH06IEhhbmRsZXJBcmd1bWVudHM8SW5wdXQ+KTogUHJvbWlzZTxPdXRwdXQ+ID0+IHtcbiAgICBmb3IgKGNvbnN0IHNvdXJjZVByb3BlcnR5IG9mIE9iamVjdC5rZXlzKHNzZWNQcm9wZXJ0aWVzKSkge1xuICAgICAgY29uc3QgdmFsdWU6IFNvdXJjZURhdGEgfCB1bmRlZmluZWQgPSAoaW5wdXQgYXMgYW55KVtzb3VyY2VQcm9wZXJ0eV07XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgY29uc3QgeyB0YXJnZXRQcm9wZXJ0eSwgaGFzaFRhcmdldFByb3BlcnR5IH0gPSAoc3NlY1Byb3BlcnRpZXMgYXMgYW55KVtcbiAgICAgICAgICBzb3VyY2VQcm9wZXJ0eVxuICAgICAgICBdO1xuICAgICAgICBjb25zdCB2YWx1ZVZpZXcgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpXG4gICAgICAgICAgPyBuZXcgVWludDhBcnJheSh2YWx1ZS5idWZmZXIsIHZhbHVlLmJ5dGVPZmZzZXQsIHZhbHVlLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgOiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCJcbiAgICAgICAgICA/IHV0ZjhEZWNvZGVyKHZhbHVlKVxuICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkodmFsdWUpO1xuICAgICAgICBjb25zdCBlbmNvZGVkID0gYmFzZTY0RW5jb2Rlcih2YWx1ZVZpZXcpO1xuICAgICAgICBjb25zdCBoYXNoID0gbmV3IGhhc2hDb25zdHJ1Y3RvcigpO1xuICAgICAgICBoYXNoLnVwZGF0ZSh2YWx1ZVZpZXcpO1xuICAgICAgICBpbnB1dCA9IHtcbiAgICAgICAgICAuLi4oaW5wdXQgYXMgYW55KSxcbiAgICAgICAgICBbdGFyZ2V0UHJvcGVydHldOiBlbmNvZGVkLFxuICAgICAgICAgIFtoYXNoVGFyZ2V0UHJvcGVydHldOiBiYXNlNjRFbmNvZGVyKGF3YWl0IGhhc2guZGlnZXN0KCkpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHQoe1xuICAgICAgaW5wdXRcbiAgICB9KTtcbiAgfTtcbn1cbiJdfQ==