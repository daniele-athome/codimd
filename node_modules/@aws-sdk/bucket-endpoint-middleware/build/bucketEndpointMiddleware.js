"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var bucketHostname_1 = require("./bucketHostname");
function bucketEndpointMiddleware(_a) {
    var _this = this;
    var _b = _a === void 0 ? {} : _a, _c = _b.forcePathStyle, forcePathStyle = _c === void 0 ? false : _c, _d = _b.preformedBucketEndpoint, preformedBucketEndpoint = _d === void 0 ? false : _d, _e = _b.useAccelerateEndpoint, useAccelerateEndpoint = _e === void 0 ? false : _e, _f = _b.useDualstackEndpoint, useDualstackEndpoint = _f === void 0 ? false : _f;
    return function (next) { return function (args) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var _a, bucketName, $bucketEndpoint, _b, $forcePathStyle, _c, $useAccelerateEndpoint, _d, $useDualstackEndpoint, replaceBucketInPath, request, _e, hostname, bucketEndpoint;
        return tslib_1.__generator(this, function (_f) {
            _a = args.input, bucketName = _a.Bucket, $bucketEndpoint = _a.$bucketEndpoint, _b = _a.$forcePathStyle, $forcePathStyle = _b === void 0 ? forcePathStyle : _b, _c = _a.$useAccelerateEndpoint, $useAccelerateEndpoint = _c === void 0 ? useAccelerateEndpoint : _c, _d = _a.$useDualstackEndpoint, $useDualstackEndpoint = _d === void 0 ? useDualstackEndpoint : _d;
            replaceBucketInPath = preformedBucketEndpoint || $bucketEndpoint;
            request = tslib_1.__assign({}, args.request);
            if ($bucketEndpoint) {
                request.hostname = bucketName;
            }
            else if (!preformedBucketEndpoint) {
                _e = bucketHostname_1.bucketHostname({
                    bucketName: bucketName,
                    baseHostname: request.hostname,
                    accelerateEndpoint: $useAccelerateEndpoint,
                    dualstackEndpoint: $useDualstackEndpoint,
                    pathStyleEndpoint: $forcePathStyle,
                    sslCompatible: request.protocol === "https:"
                }), hostname = _e.hostname, bucketEndpoint = _e.bucketEndpoint;
                request.hostname = hostname;
                replaceBucketInPath = bucketEndpoint;
            }
            if (replaceBucketInPath) {
                request.path = request.path.replace(/^(\/)?[^\/]+/, "");
                if (request.path === "") {
                    request.path = "/";
                }
            }
            return [2 /*return*/, next(tslib_1.__assign({}, args, { request: request }))];
        });
    }); }; };
}
exports.bucketEndpointMiddleware = bucketEndpointMiddleware;
//# sourceMappingURL=bucketEndpointMiddleware.js.map