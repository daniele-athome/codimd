"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var protocol_timestamp_1 = require("@aws-sdk/protocol-timestamp");
var pixl_xml_1 = require("../vendor/pixl-xml");
var XmlBodyParser = /** @class */ (function () {
    function XmlBodyParser(base64Decoder) {
        this.base64Decoder = base64Decoder;
    }
    XmlBodyParser.prototype.parse = function (member, input) {
        var _a;
        var xmlObj = pixl_xml_1.parse(input, {
            preserveAttributes: true
        });
        var wrappedShape = member.shape;
        if (member.resultWrapper) {
            wrappedShape = {
                type: "structure",
                required: [],
                members: (_a = {},
                    _a[member.resultWrapper] = {
                        shape: member.shape
                    },
                    _a)
            };
        }
        var data = this.unmarshall(wrappedShape, xmlObj);
        if (member.resultWrapper) {
            data = data[member.resultWrapper];
        }
        //standard query
        if (xmlObj.ResponseMetadata && xmlObj.ResponseMetadata.RequestId) {
            data.$metadata = {
                requestId: xmlObj.ResponseMetadata.RequestId
            };
        }
        //ec2 query
        if (xmlObj.RequestId) {
            data.$metadata = {
                requestId: xmlObj.RequestId
            };
        }
        //SDB query
        if (xmlObj.RequestID) {
            data.$metadata = {
                requestId: xmlObj.RequestID
            };
        }
        return data;
    };
    XmlBodyParser.prototype.unmarshall = function (shape, xmlObj) {
        if (shape.type === "structure") {
            return this.parseStructure(shape, xmlObj);
        }
        else if (shape.type === "list") {
            return this.parseList(shape, xmlObj);
        }
        else if (shape.type === "map") {
            return this.parseMap(shape, xmlObj);
        }
        else if (shape.type === "timestamp") {
            return this.parseTimeStamp(shape, xmlObj);
        }
        else if (shape.type === "blob") {
            return typeof xmlObj === "string"
                ? this.base64Decoder(xmlObj)
                : undefined;
        }
        else if (shape.type === "boolean") {
            if (!xmlObj)
                return undefined;
            return xmlObj === "true";
        }
        else if (shape.type === "float" || shape.type === "integer") {
            if (!xmlObj) {
                return undefined;
            }
            var num = Number(xmlObj);
            return isFinite(num) ? num : undefined;
        }
        else if (shape.type === "string") {
            if (xmlObj === "") {
                return xmlObj;
            }
            return xmlObj ? xmlObj.toString() : undefined;
        }
        else {
            throw new Error(shape.type + " can not be parsed");
        }
    };
    XmlBodyParser.prototype.parseStructure = function (shape, xmlObj) {
        var e_1, _a;
        if (xmlObj === undefined) {
            return undefined;
        }
        var obj = {};
        try {
            for (var _b = tslib_1.__values(Object.keys(shape.members)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var memberName = _c.value;
                var member = shape.members[memberName];
                var xmlKey = this.mapToXMLKey(member, memberName);
                var subXmlObj = xmlObj;
                if (member.xmlAttribute) {
                    subXmlObj = xmlObj["_Attribs"];
                }
                obj[memberName] = this.unmarshall(member.shape, subXmlObj[xmlKey]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return obj;
    };
    XmlBodyParser.prototype.mapToXMLKey = function (member, name) {
        var keyName = member.locationName || name, membershape = member.shape;
        if (membershape.type === "list") {
            keyName = membershape.flattened
                ? membershape.member.locationName || keyName
                : keyName;
        }
        return keyName;
    };
    XmlBodyParser.prototype.parseList = function (shape, xmlObj) {
        var e_2, _a;
        var list = [], xmlList = xmlObj;
        if (!xmlObj || Object.keys(xmlObj).length === 0) {
            return list;
        }
        if (!Array.isArray(xmlObj)) {
            var key = shape.member.locationName || "member";
            xmlList = shape.flattened ? xmlObj : xmlObj[key];
            if (!xmlList || Object.keys(xmlList).length === 0) {
                return list;
            }
            if (!Array.isArray(xmlList)) {
                xmlList = [xmlList];
            }
        }
        try {
            for (var xmlList_1 = tslib_1.__values(xmlList), xmlList_1_1 = xmlList_1.next(); !xmlList_1_1.done; xmlList_1_1 = xmlList_1.next()) {
                var xmlObjEntry = xmlList_1_1.value;
                list.push(this.unmarshall(shape.member.shape, xmlObjEntry));
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (xmlList_1_1 && !xmlList_1_1.done && (_a = xmlList_1.return)) _a.call(xmlList_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return list;
    };
    XmlBodyParser.prototype.parseMap = function (shape, xmlObj) {
        var e_3, _a;
        var obj = {}, mapEntryList = xmlObj;
        if (!shape.flattened) {
            mapEntryList = xmlObj["entry"];
        }
        if (!mapEntryList || Object.keys(mapEntryList).length === 0) {
            return {};
        }
        if (!Array.isArray(mapEntryList)) {
            mapEntryList = [mapEntryList];
        }
        try {
            for (var mapEntryList_1 = tslib_1.__values(mapEntryList), mapEntryList_1_1 = mapEntryList_1.next(); !mapEntryList_1_1.done; mapEntryList_1_1 = mapEntryList_1.next()) {
                var mapEntry = mapEntryList_1_1.value;
                var keyName = shape.key.locationName || "key";
                var valueName = shape.value.locationName || "value";
                obj[mapEntry[keyName]] = this.unmarshall(shape.value.shape, mapEntry[valueName]);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (mapEntryList_1_1 && !mapEntryList_1_1.done && (_a = mapEntryList_1.return)) _a.call(mapEntryList_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return obj;
    };
    XmlBodyParser.prototype.parseTimeStamp = function (shape, xmlObj) {
        if (!xmlObj) {
            return undefined;
        }
        var date = protocol_timestamp_1.toDate(xmlObj);
        if (date.toString() === "Invalid Date") {
            return undefined;
        }
        return date;
    };
    return XmlBodyParser;
}());
exports.XmlBodyParser = XmlBodyParser;
//# sourceMappingURL=data:application/json;base64,