"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var is_array_buffer_1 = require("@aws-sdk/is-array-buffer");
function applyBodyChecksumMiddleware(headerName, hashCtor, encoder, streamHasher) {
    var _this = this;
    if (streamHasher === void 0) { streamHasher = throwOnStream; }
    return function (next) { return function (_a) {
        var request = _a.request, input = _a.input;
        return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _b, body, headers, digest, hash, _c, _d, _e, _f, _g;
            return tslib_1.__generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        body = request.body, headers = request.headers;
                        if (!!hasHeader(headerName, headers)) return [3 /*break*/, 2];
                        digest = void 0;
                        if (body === undefined ||
                            typeof body === "string" ||
                            ArrayBuffer.isView(body) ||
                            is_array_buffer_1.isArrayBuffer(body)) {
                            hash = new hashCtor();
                            hash.update(body || "");
                            digest = hash.digest();
                        }
                        else {
                            digest = streamHasher(hashCtor, body);
                        }
                        _c = [{}, request];
                        _d = {};
                        _e = [{}, headers];
                        _b = {};
                        _f = headerName;
                        _g = encoder;
                        return [4 /*yield*/, digest];
                    case 1:
                        request = tslib_1.__assign.apply(void 0, _c.concat([(_d.headers = tslib_1.__assign.apply(void 0, _e.concat([(_b[_f] = _g.apply(void 0, [_h.sent()]), _b)])), _d)]));
                        _h.label = 2;
                    case 2: return [2 /*return*/, next({ input: input, request: request })];
                }
            });
        });
    }; };
}
exports.applyBodyChecksumMiddleware = applyBodyChecksumMiddleware;
function hasHeader(soughtHeader, headers) {
    var e_1, _a;
    soughtHeader = soughtHeader.toLowerCase();
    try {
        for (var _b = tslib_1.__values(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var headerName = _c.value;
            if (soughtHeader === headerName.toLowerCase()) {
                return true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
}
function throwOnStream(stream) {
    throw new Error("applyBodyChecksumMiddleware encountered a request with a streaming body of type " + Object.prototype.toString.call(stream) + ", but no stream hasher function was provided");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNERBQXlEO0FBV3pELFNBQWdCLDJCQUEyQixDQUN6QyxVQUFrQixFQUNsQixRQUEwQixFQUMxQixPQUFnQixFQUNoQixZQUFzRDtJQUp4RCxpQkF3Q0M7SUFwQ0MsNkJBQUEsRUFBQSw0QkFBc0Q7SUFFdEQsT0FBTyxVQUNMLElBQW9DLElBQ0QsT0FBQSxVQUFPLEVBR1Y7WUFGaEMsb0JBQU8sRUFDUCxnQkFBSzs7Ozs7O3dCQUVHLElBQUksR0FBYyxPQUFPLEtBQXJCLEVBQUUsT0FBTyxHQUFLLE9BQU8sUUFBWixDQUFhOzZCQUM5QixDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLEVBQS9CLHdCQUErQjt3QkFDN0IsTUFBTSxTQUFxQixDQUFDO3dCQUVoQyxJQUNFLElBQUksS0FBSyxTQUFTOzRCQUNsQixPQUFPLElBQUksS0FBSyxRQUFROzRCQUN4QixXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQzs0QkFDeEIsK0JBQWEsQ0FBQyxJQUFJLENBQUMsRUFDbkI7NEJBQ00sSUFBSSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7NEJBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDOzRCQUN4QixNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO3lCQUN4Qjs2QkFBTTs0QkFDTCxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQzt5QkFDdkM7a0NBR0ksT0FBTzs7a0NBRUwsT0FBTzs7d0JBQ1QsS0FBQSxVQUFVLENBQUE7d0JBQUcsS0FBQSxPQUFPLENBQUE7d0JBQUMscUJBQU0sTUFBTSxFQUFBOzt3QkFKdEMsT0FBTyw4Q0FFTCxVQUFPLHVEQUVTLGtCQUFRLFNBQVksRUFBQyxnQkFFdEMsQ0FBQzs7NEJBR0osc0JBQU8sSUFBSSxDQUFDLEVBQUUsS0FBSyxPQUFBLEVBQUUsT0FBTyxTQUFBLEVBQUUsQ0FBQyxFQUFDOzs7O0tBQ2pDLEVBL0JvQyxDQStCcEMsQ0FBQztBQUNKLENBQUM7QUF4Q0Qsa0VBd0NDO0FBRUQsU0FBUyxTQUFTLENBQUMsWUFBb0IsRUFBRSxPQUFrQjs7SUFDekQsWUFBWSxHQUFHLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQzs7UUFDMUMsS0FBeUIsSUFBQSxLQUFBLGlCQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUEsZ0JBQUEsNEJBQUU7WUFBMUMsSUFBTSxVQUFVLFdBQUE7WUFDbkIsSUFBSSxZQUFZLEtBQUssVUFBVSxDQUFDLFdBQVcsRUFBRSxFQUFFO2dCQUM3QyxPQUFPLElBQUksQ0FBQzthQUNiO1NBQ0Y7Ozs7Ozs7OztJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLE1BQVc7SUFDaEMsTUFBTSxJQUFJLEtBQUssQ0FDYixxRkFBbUYsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUMvRyxNQUFNLENBQ1AsaURBQThDLENBQ2hELENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNBcnJheUJ1ZmZlciB9IGZyb20gXCJAYXdzLXNkay9pcy1hcnJheS1idWZmZXJcIjtcbmltcG9ydCB7XG4gIEJ1aWxkSGFuZGxlcixcbiAgQnVpbGRIYW5kbGVyQXJndW1lbnRzLFxuICBCdWlsZE1pZGRsZXdhcmUsXG4gIEVuY29kZXIsXG4gIEhhc2gsXG4gIEhlYWRlckJhZyxcbiAgU3RyZWFtSGFzaGVyXG59IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlCb2R5Q2hlY2tzdW1NaWRkbGV3YXJlPFN0cmVhbVR5cGU+KFxuICBoZWFkZXJOYW1lOiBzdHJpbmcsXG4gIGhhc2hDdG9yOiB7IG5ldyAoKTogSGFzaCB9LFxuICBlbmNvZGVyOiBFbmNvZGVyLFxuICBzdHJlYW1IYXNoZXI6IFN0cmVhbUhhc2hlcjxTdHJlYW1UeXBlPiA9IHRocm93T25TdHJlYW1cbik6IEJ1aWxkTWlkZGxld2FyZTxhbnksIGFueSwgU3RyZWFtVHlwZT4ge1xuICByZXR1cm4gPE91dHB1dCBleHRlbmRzIG9iamVjdD4oXG4gICAgbmV4dDogQnVpbGRIYW5kbGVyPGFueSwgT3V0cHV0LCBhbnk+XG4gICk6IEJ1aWxkSGFuZGxlcjxhbnksIE91dHB1dCwgYW55PiA9PiBhc3luYyAoe1xuICAgIHJlcXVlc3QsXG4gICAgaW5wdXRcbiAgfTogQnVpbGRIYW5kbGVyQXJndW1lbnRzPGFueSwgYW55Pik6IFByb21pc2U8T3V0cHV0PiA9PiB7XG4gICAgY29uc3QgeyBib2R5LCBoZWFkZXJzIH0gPSByZXF1ZXN0O1xuICAgIGlmICghaGFzSGVhZGVyKGhlYWRlck5hbWUsIGhlYWRlcnMpKSB7XG4gICAgICBsZXQgZGlnZXN0OiBQcm9taXNlPFVpbnQ4QXJyYXk+O1xuXG4gICAgICBpZiAoXG4gICAgICAgIGJvZHkgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICB0eXBlb2YgYm9keSA9PT0gXCJzdHJpbmdcIiB8fFxuICAgICAgICBBcnJheUJ1ZmZlci5pc1ZpZXcoYm9keSkgfHxcbiAgICAgICAgaXNBcnJheUJ1ZmZlcihib2R5KVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IGhhc2ggPSBuZXcgaGFzaEN0b3IoKTtcbiAgICAgICAgaGFzaC51cGRhdGUoYm9keSB8fCBcIlwiKTtcbiAgICAgICAgZGlnZXN0ID0gaGFzaC5kaWdlc3QoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpZ2VzdCA9IHN0cmVhbUhhc2hlcihoYXNoQ3RvciwgYm9keSk7XG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3QgPSB7XG4gICAgICAgIC4uLnJlcXVlc3QsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAuLi5oZWFkZXJzLFxuICAgICAgICAgIFtoZWFkZXJOYW1lXTogZW5jb2Rlcihhd2FpdCBkaWdlc3QpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHQoeyBpbnB1dCwgcmVxdWVzdCB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaGFzSGVhZGVyKHNvdWdodEhlYWRlcjogc3RyaW5nLCBoZWFkZXJzOiBIZWFkZXJCYWcpOiBib29sZWFuIHtcbiAgc291Z2h0SGVhZGVyID0gc291Z2h0SGVhZGVyLnRvTG93ZXJDYXNlKCk7XG4gIGZvciAoY29uc3QgaGVhZGVyTmFtZSBvZiBPYmplY3Qua2V5cyhoZWFkZXJzKSkge1xuICAgIGlmIChzb3VnaHRIZWFkZXIgPT09IGhlYWRlck5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiB0aHJvd09uU3RyZWFtKHN0cmVhbTogYW55KTogbmV2ZXIge1xuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgYGFwcGx5Qm9keUNoZWNrc3VtTWlkZGxld2FyZSBlbmNvdW50ZXJlZCBhIHJlcXVlc3Qgd2l0aCBhIHN0cmVhbWluZyBib2R5IG9mIHR5cGUgJHtPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoXG4gICAgICBzdHJlYW1cbiAgICApfSwgYnV0IG5vIHN0cmVhbSBoYXNoZXIgZnVuY3Rpb24gd2FzIHByb3ZpZGVkYFxuICApO1xufVxuIl19