"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var S3Client_1 = require("./S3Client");
var AbortMultipartUploadCommand_1 = require("./commands/AbortMultipartUploadCommand");
var CompleteMultipartUploadCommand_1 = require("./commands/CompleteMultipartUploadCommand");
var CopyObjectCommand_1 = require("./commands/CopyObjectCommand");
var CreateBucketCommand_1 = require("./commands/CreateBucketCommand");
var CreateMultipartUploadCommand_1 = require("./commands/CreateMultipartUploadCommand");
var DeleteBucketAnalyticsConfigurationCommand_1 = require("./commands/DeleteBucketAnalyticsConfigurationCommand");
var DeleteBucketCommand_1 = require("./commands/DeleteBucketCommand");
var DeleteBucketCorsCommand_1 = require("./commands/DeleteBucketCorsCommand");
var DeleteBucketEncryptionCommand_1 = require("./commands/DeleteBucketEncryptionCommand");
var DeleteBucketInventoryConfigurationCommand_1 = require("./commands/DeleteBucketInventoryConfigurationCommand");
var DeleteBucketLifecycleCommand_1 = require("./commands/DeleteBucketLifecycleCommand");
var DeleteBucketMetricsConfigurationCommand_1 = require("./commands/DeleteBucketMetricsConfigurationCommand");
var DeleteBucketPolicyCommand_1 = require("./commands/DeleteBucketPolicyCommand");
var DeleteBucketReplicationCommand_1 = require("./commands/DeleteBucketReplicationCommand");
var DeleteBucketTaggingCommand_1 = require("./commands/DeleteBucketTaggingCommand");
var DeleteBucketWebsiteCommand_1 = require("./commands/DeleteBucketWebsiteCommand");
var DeleteObjectCommand_1 = require("./commands/DeleteObjectCommand");
var DeleteObjectTaggingCommand_1 = require("./commands/DeleteObjectTaggingCommand");
var DeleteObjectsCommand_1 = require("./commands/DeleteObjectsCommand");
var GetBucketAccelerateConfigurationCommand_1 = require("./commands/GetBucketAccelerateConfigurationCommand");
var GetBucketAclCommand_1 = require("./commands/GetBucketAclCommand");
var GetBucketAnalyticsConfigurationCommand_1 = require("./commands/GetBucketAnalyticsConfigurationCommand");
var GetBucketCorsCommand_1 = require("./commands/GetBucketCorsCommand");
var GetBucketEncryptionCommand_1 = require("./commands/GetBucketEncryptionCommand");
var GetBucketInventoryConfigurationCommand_1 = require("./commands/GetBucketInventoryConfigurationCommand");
var GetBucketLifecycleCommand_1 = require("./commands/GetBucketLifecycleCommand");
var GetBucketLifecycleConfigurationCommand_1 = require("./commands/GetBucketLifecycleConfigurationCommand");
var GetBucketLocationCommand_1 = require("./commands/GetBucketLocationCommand");
var GetBucketLoggingCommand_1 = require("./commands/GetBucketLoggingCommand");
var GetBucketMetricsConfigurationCommand_1 = require("./commands/GetBucketMetricsConfigurationCommand");
var GetBucketNotificationCommand_1 = require("./commands/GetBucketNotificationCommand");
var GetBucketNotificationConfigurationCommand_1 = require("./commands/GetBucketNotificationConfigurationCommand");
var GetBucketPolicyCommand_1 = require("./commands/GetBucketPolicyCommand");
var GetBucketReplicationCommand_1 = require("./commands/GetBucketReplicationCommand");
var GetBucketRequestPaymentCommand_1 = require("./commands/GetBucketRequestPaymentCommand");
var GetBucketTaggingCommand_1 = require("./commands/GetBucketTaggingCommand");
var GetBucketVersioningCommand_1 = require("./commands/GetBucketVersioningCommand");
var GetBucketWebsiteCommand_1 = require("./commands/GetBucketWebsiteCommand");
var GetObjectAclCommand_1 = require("./commands/GetObjectAclCommand");
var GetObjectCommand_1 = require("./commands/GetObjectCommand");
var GetObjectTaggingCommand_1 = require("./commands/GetObjectTaggingCommand");
var GetObjectTorrentCommand_1 = require("./commands/GetObjectTorrentCommand");
var HeadBucketCommand_1 = require("./commands/HeadBucketCommand");
var HeadObjectCommand_1 = require("./commands/HeadObjectCommand");
var ListBucketAnalyticsConfigurationsCommand_1 = require("./commands/ListBucketAnalyticsConfigurationsCommand");
var ListBucketInventoryConfigurationsCommand_1 = require("./commands/ListBucketInventoryConfigurationsCommand");
var ListBucketMetricsConfigurationsCommand_1 = require("./commands/ListBucketMetricsConfigurationsCommand");
var ListBucketsCommand_1 = require("./commands/ListBucketsCommand");
var ListMultipartUploadsCommand_1 = require("./commands/ListMultipartUploadsCommand");
var ListObjectVersionsCommand_1 = require("./commands/ListObjectVersionsCommand");
var ListObjectsCommand_1 = require("./commands/ListObjectsCommand");
var ListObjectsV2Command_1 = require("./commands/ListObjectsV2Command");
var ListPartsCommand_1 = require("./commands/ListPartsCommand");
var PutBucketAccelerateConfigurationCommand_1 = require("./commands/PutBucketAccelerateConfigurationCommand");
var PutBucketAclCommand_1 = require("./commands/PutBucketAclCommand");
var PutBucketAnalyticsConfigurationCommand_1 = require("./commands/PutBucketAnalyticsConfigurationCommand");
var PutBucketCorsCommand_1 = require("./commands/PutBucketCorsCommand");
var PutBucketEncryptionCommand_1 = require("./commands/PutBucketEncryptionCommand");
var PutBucketInventoryConfigurationCommand_1 = require("./commands/PutBucketInventoryConfigurationCommand");
var PutBucketLifecycleCommand_1 = require("./commands/PutBucketLifecycleCommand");
var PutBucketLifecycleConfigurationCommand_1 = require("./commands/PutBucketLifecycleConfigurationCommand");
var PutBucketLoggingCommand_1 = require("./commands/PutBucketLoggingCommand");
var PutBucketMetricsConfigurationCommand_1 = require("./commands/PutBucketMetricsConfigurationCommand");
var PutBucketNotificationCommand_1 = require("./commands/PutBucketNotificationCommand");
var PutBucketNotificationConfigurationCommand_1 = require("./commands/PutBucketNotificationConfigurationCommand");
var PutBucketPolicyCommand_1 = require("./commands/PutBucketPolicyCommand");
var PutBucketReplicationCommand_1 = require("./commands/PutBucketReplicationCommand");
var PutBucketRequestPaymentCommand_1 = require("./commands/PutBucketRequestPaymentCommand");
var PutBucketTaggingCommand_1 = require("./commands/PutBucketTaggingCommand");
var PutBucketVersioningCommand_1 = require("./commands/PutBucketVersioningCommand");
var PutBucketWebsiteCommand_1 = require("./commands/PutBucketWebsiteCommand");
var PutObjectAclCommand_1 = require("./commands/PutObjectAclCommand");
var PutObjectCommand_1 = require("./commands/PutObjectCommand");
var PutObjectTaggingCommand_1 = require("./commands/PutObjectTaggingCommand");
var RestoreObjectCommand_1 = require("./commands/RestoreObjectCommand");
var SelectObjectContentCommand_1 = require("./commands/SelectObjectContentCommand");
var UploadPartCommand_1 = require("./commands/UploadPartCommand");
var UploadPartCopyCommand_1 = require("./commands/UploadPartCopyCommand");
var S3 = /** @class */ (function (_super) {
    tslib_1.__extends(S3, _super);
    function S3() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    S3.prototype.abortMultipartUpload = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new AbortMultipartUploadCommand_1.AbortMultipartUploadCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.completeMultipartUpload = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new CompleteMultipartUploadCommand_1.CompleteMultipartUploadCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.copyObject = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new CopyObjectCommand_1.CopyObjectCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.createBucket = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new CreateBucketCommand_1.CreateBucketCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.createMultipartUpload = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new CreateMultipartUploadCommand_1.CreateMultipartUploadCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.deleteBucket = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteBucketCommand_1.DeleteBucketCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.deleteBucketAnalyticsConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteBucketAnalyticsConfigurationCommand_1.DeleteBucketAnalyticsConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.deleteBucketCors = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteBucketCorsCommand_1.DeleteBucketCorsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.deleteBucketEncryption = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteBucketEncryptionCommand_1.DeleteBucketEncryptionCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.deleteBucketInventoryConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteBucketInventoryConfigurationCommand_1.DeleteBucketInventoryConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.deleteBucketLifecycle = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteBucketLifecycleCommand_1.DeleteBucketLifecycleCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.deleteBucketMetricsConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteBucketMetricsConfigurationCommand_1.DeleteBucketMetricsConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.deleteBucketPolicy = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteBucketPolicyCommand_1.DeleteBucketPolicyCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.deleteBucketReplication = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteBucketReplicationCommand_1.DeleteBucketReplicationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.deleteBucketTagging = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteBucketTaggingCommand_1.DeleteBucketTaggingCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.deleteBucketWebsite = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteBucketWebsiteCommand_1.DeleteBucketWebsiteCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.deleteObject = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteObjectCommand_1.DeleteObjectCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.deleteObjectTagging = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteObjectTaggingCommand_1.DeleteObjectTaggingCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.deleteObjects = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteObjectsCommand_1.DeleteObjectsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketAccelerateConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketAccelerateConfigurationCommand_1.GetBucketAccelerateConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketAcl = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketAclCommand_1.GetBucketAclCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketAnalyticsConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketAnalyticsConfigurationCommand_1.GetBucketAnalyticsConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketCors = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketCorsCommand_1.GetBucketCorsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketEncryption = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketEncryptionCommand_1.GetBucketEncryptionCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketInventoryConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketInventoryConfigurationCommand_1.GetBucketInventoryConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketLifecycle = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketLifecycleCommand_1.GetBucketLifecycleCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketLifecycleConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketLifecycleConfigurationCommand_1.GetBucketLifecycleConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketLocation = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketLocationCommand_1.GetBucketLocationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketLogging = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketLoggingCommand_1.GetBucketLoggingCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketMetricsConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketMetricsConfigurationCommand_1.GetBucketMetricsConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketNotification = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketNotificationCommand_1.GetBucketNotificationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketNotificationConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketNotificationConfigurationCommand_1.GetBucketNotificationConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketPolicy = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketPolicyCommand_1.GetBucketPolicyCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketReplication = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketReplicationCommand_1.GetBucketReplicationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketRequestPayment = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketRequestPaymentCommand_1.GetBucketRequestPaymentCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketTagging = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketTaggingCommand_1.GetBucketTaggingCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketVersioning = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketVersioningCommand_1.GetBucketVersioningCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getBucketWebsite = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBucketWebsiteCommand_1.GetBucketWebsiteCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getObject = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetObjectCommand_1.GetObjectCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getObjectAcl = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetObjectAclCommand_1.GetObjectAclCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getObjectTagging = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetObjectTaggingCommand_1.GetObjectTaggingCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.getObjectTorrent = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetObjectTorrentCommand_1.GetObjectTorrentCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.headBucket = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new HeadBucketCommand_1.HeadBucketCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.headObject = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new HeadObjectCommand_1.HeadObjectCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.listBucketAnalyticsConfigurations = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListBucketAnalyticsConfigurationsCommand_1.ListBucketAnalyticsConfigurationsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.listBucketInventoryConfigurations = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListBucketInventoryConfigurationsCommand_1.ListBucketInventoryConfigurationsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.listBucketMetricsConfigurations = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListBucketMetricsConfigurationsCommand_1.ListBucketMetricsConfigurationsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.listBuckets = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListBucketsCommand_1.ListBucketsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.listMultipartUploads = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListMultipartUploadsCommand_1.ListMultipartUploadsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.listObjectVersions = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListObjectVersionsCommand_1.ListObjectVersionsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.listObjects = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListObjectsCommand_1.ListObjectsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.listObjectsV2 = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListObjectsV2Command_1.ListObjectsV2Command(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.listParts = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListPartsCommand_1.ListPartsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putBucketAccelerateConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutBucketAccelerateConfigurationCommand_1.PutBucketAccelerateConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putBucketAcl = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutBucketAclCommand_1.PutBucketAclCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putBucketAnalyticsConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutBucketAnalyticsConfigurationCommand_1.PutBucketAnalyticsConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putBucketCors = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutBucketCorsCommand_1.PutBucketCorsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putBucketEncryption = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutBucketEncryptionCommand_1.PutBucketEncryptionCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putBucketInventoryConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutBucketInventoryConfigurationCommand_1.PutBucketInventoryConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putBucketLifecycle = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutBucketLifecycleCommand_1.PutBucketLifecycleCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putBucketLifecycleConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutBucketLifecycleConfigurationCommand_1.PutBucketLifecycleConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putBucketLogging = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutBucketLoggingCommand_1.PutBucketLoggingCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putBucketMetricsConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutBucketMetricsConfigurationCommand_1.PutBucketMetricsConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putBucketNotification = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutBucketNotificationCommand_1.PutBucketNotificationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putBucketNotificationConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutBucketNotificationConfigurationCommand_1.PutBucketNotificationConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putBucketPolicy = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutBucketPolicyCommand_1.PutBucketPolicyCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putBucketReplication = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutBucketReplicationCommand_1.PutBucketReplicationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putBucketRequestPayment = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutBucketRequestPaymentCommand_1.PutBucketRequestPaymentCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putBucketTagging = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutBucketTaggingCommand_1.PutBucketTaggingCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putBucketVersioning = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutBucketVersioningCommand_1.PutBucketVersioningCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putBucketWebsite = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutBucketWebsiteCommand_1.PutBucketWebsiteCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putObject = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutObjectCommand_1.PutObjectCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putObjectAcl = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutObjectAclCommand_1.PutObjectAclCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.putObjectTagging = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutObjectTaggingCommand_1.PutObjectTaggingCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.restoreObject = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new RestoreObjectCommand_1.RestoreObjectCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.selectObjectContent = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new SelectObjectContentCommand_1.SelectObjectContentCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.uploadPart = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new UploadPartCommand_1.UploadPartCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    S3.prototype.uploadPartCopy = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new UploadPartCopyCommand_1.UploadPartCopyCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    return S3;
}(S3Client_1.S3Client));
exports.S3 = S3;
//# sourceMappingURL=S3.js.map