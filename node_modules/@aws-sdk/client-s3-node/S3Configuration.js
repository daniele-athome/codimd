"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var __aws_sdk_core_handler = require("@aws-sdk/core-handler");
var __aws_sdk_credential_provider_node = require("@aws-sdk/credential-provider-node");
var __aws_sdk_hash_node = require("@aws-sdk/hash-node");
var __aws_sdk_hash_stream_node = require("@aws-sdk/hash-stream-node");
var __aws_sdk_node_http_handler = require("@aws-sdk/node-http-handler");
var __aws_sdk_protocol_rest = require("@aws-sdk/protocol-rest");
var __aws_sdk_region_provider = require("@aws-sdk/region-provider");
var __aws_sdk_s3_error_unmarshaller = require("@aws-sdk/s3-error-unmarshaller");
var __aws_sdk_signature_v4 = require("@aws-sdk/signature-v4");
var __aws_sdk_stream_collector_node = require("@aws-sdk/stream-collector-node");
var __aws_sdk_url_parser_node = require("@aws-sdk/url-parser-node");
var __aws_sdk_util_base64_node = require("@aws-sdk/util-base64-node");
var __aws_sdk_util_body_length_node = require("@aws-sdk/util-body-length-node");
var __aws_sdk_util_utf8_node = require("@aws-sdk/util-utf8-node");
var __aws_sdk_xml_body_builder = require("@aws-sdk/xml-body-builder");
var __aws_sdk_xml_body_parser = require("@aws-sdk/xml-body-parser");
exports.configurationProperties = {
    profile: {},
    maxRedirects: {
        defaultValue: 10
    },
    maxRetries: {
        defaultValue: 3
    },
    region: {
        defaultProvider: __aws_sdk_region_provider.defaultProvider,
        normalize: function (value) {
            if (typeof value === "string") {
                var promisified_1 = Promise.resolve(value);
                return function () { return promisified_1; };
            }
            return value;
        }
    },
    sslEnabled: {
        defaultValue: true
    },
    urlParser: {
        defaultValue: __aws_sdk_url_parser_node.parseUrl
    },
    endpointProvider: {
        defaultValue: function (sslEnabled, region) { return ({
            protocol: sslEnabled ? "https:" : "http:",
            path: "/",
            hostname: "s3." + region + ".amazonaws.com"
        }); }
    },
    endpoint: {
        defaultProvider: function (configuration) {
            var promisified = configuration
                .region()
                .then(function (region) {
                return configuration.endpointProvider(configuration.sslEnabled, region);
            });
            return function () { return promisified; };
        },
        normalize: function (value, configuration) {
            if (typeof value === "string") {
                var promisified_2 = Promise.resolve(configuration.urlParser(value));
                return function () { return promisified_2; };
            }
            else if (typeof value === "object") {
                var promisified_3 = Promise.resolve(value);
                return function () { return promisified_3; };
            }
            // Users are not required to supply an endpoint, so `value`
            // could be undefined. This function, however, will only be
            // invoked if `value` is defined, so the return will never
            // be undefined.
            return value;
        }
    },
    base64Decoder: {
        defaultValue: __aws_sdk_util_base64_node.fromBase64
    },
    base64Encoder: {
        defaultValue: __aws_sdk_util_base64_node.toBase64
    },
    utf8Decoder: {
        defaultValue: __aws_sdk_util_utf8_node.fromUtf8
    },
    utf8Encoder: {
        defaultValue: __aws_sdk_util_utf8_node.toUtf8
    },
    streamCollector: {
        defaultValue: __aws_sdk_stream_collector_node.streamCollector
    },
    serializer: {
        defaultProvider: function (configuration) {
            var promisified = configuration
                .endpoint()
                .then(function (endpoint) {
                return new __aws_sdk_protocol_rest.RestSerializer(endpoint, new __aws_sdk_xml_body_builder.XmlBodyBuilder(configuration.base64Encoder, configuration.utf8Decoder), configuration.base64Encoder, configuration.utf8Decoder);
            });
            return function () { return promisified; };
        }
    },
    parser: {
        defaultProvider: function (configuration) {
            return new __aws_sdk_protocol_rest.RestParser(new __aws_sdk_xml_body_parser.XmlBodyParser(configuration.base64Decoder), configuration.streamCollector, __aws_sdk_s3_error_unmarshaller.s3ErrorUnmarshaller, configuration.utf8Encoder, configuration.base64Decoder);
        }
    },
    _user_injected_http_handler: {
        defaultProvider: function (configuration) {
            return !configuration.httpHandler;
        }
    },
    httpHandler: {
        defaultProvider: function () { return new __aws_sdk_node_http_handler.NodeHttpHandler(); }
    },
    handler: {
        defaultProvider: function (configuration) {
            return __aws_sdk_core_handler.coreHandler(configuration.httpHandler, configuration.parser);
        }
    },
    bodyLengthChecker: {
        defaultValue: __aws_sdk_util_body_length_node.calculateBodyLength
    },
    retryDecider: {},
    delayDecider: {},
    credentials: {
        defaultProvider: __aws_sdk_credential_provider_node.defaultProvider,
        normalize: function (value) {
            if (typeof value === "object") {
                var promisified_4 = Promise.resolve(value);
                return function () { return promisified_4; };
            }
            return value;
        }
    },
    sha256: {
        defaultValue: __aws_sdk_hash_node.Hash.bind(null, "sha256")
    },
    signingName: {
        defaultValue: "s3"
    },
    signer: {
        defaultProvider: function (configuration) {
            return new __aws_sdk_signature_v4.SignatureV4({
                credentials: configuration.credentials,
                region: configuration.region,
                service: configuration.signingName,
                sha256: configuration.sha256,
                uriEscapePath: false
            });
        }
    },
    bucketEndpoint: {
        defaultValue: false
    },
    forcePathStyle: {
        defaultValue: false
    },
    useAccelerateEndpoint: {
        defaultValue: false
    },
    useDualstackEndpoint: {
        defaultValue: false
    },
    disableBodySigning: {
        defaultProvider: function (configuration) {
            return configuration.sslEnabled;
        }
    },
    streamHasher: {
        defaultValue: __aws_sdk_hash_stream_node.calculateSha256
    },
    md5: {
        defaultValue: __aws_sdk_hash_node.Hash.bind(null, "md5")
    }
};
//# sourceMappingURL=S3Configuration.js.map