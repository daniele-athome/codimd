"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var __aws_sdk_bucket_endpoint_middleware = require("@aws-sdk/bucket-endpoint-middleware");
var __aws_sdk_middleware_header_default = require("@aws-sdk/middleware-header-default");
var __aws_sdk_middleware_stack = require("@aws-sdk/middleware-stack");
var __aws_sdk_ssec_middleware = require("@aws-sdk/ssec-middleware");
var PutObject_1 = require("../model/PutObject");
var PutObjectCommand = /** @class */ (function () {
    function PutObjectCommand(input) {
        this.input = input;
        this.model = PutObject_1.PutObject;
        this.middlewareStack = new __aws_sdk_middleware_stack.MiddlewareStack();
    }
    PutObjectCommand.prototype.resolveMiddleware = function (clientStack, configuration) {
        var handler = configuration.handler;
        var stack = clientStack.concat(this.middlewareStack);
        var handlerExecutionContext = {
            logger: {},
            model: this.model
        };
        stack.add(__aws_sdk_bucket_endpoint_middleware.bucketEndpointMiddleware({
            forcePathStyle: configuration.forcePathStyle,
            preformedBucketEndpoint: configuration.bucketEndpoint,
            useAccelerateEndpoint: configuration.useAccelerateEndpoint,
            useDualstackEndpoint: configuration.useDualstackEndpoint
        }), {
            step: "build",
            priority: 0
        });
        if (configuration.disableBodySigning) {
            stack.add(__aws_sdk_middleware_header_default.headerDefault({
                "x-amz-content-sha256": "UNSIGNED-PAYLOAD"
            }), {
                step: "build",
                priority: 100,
                tags: { BODY_CHECKSUM: true, UNSIGNED_PAYLOAD: true }
            });
        }
        stack.add(__aws_sdk_ssec_middleware.ssecMiddleware({
            base64Encoder: configuration.base64Encoder,
            hashConstructor: configuration.md5,
            ssecProperties: {
                $serverSideEncryptionKey: {
                    targetProperty: "SSECustomerKey",
                    hashTargetProperty: "SSECustomerKeyMD5"
                }
            },
            utf8Decoder: configuration.utf8Decoder
        }), {
            step: "initialize",
            priority: 0
        });
        return stack.resolve(handler(handlerExecutionContext), handlerExecutionContext);
    };
    return PutObjectCommand;
}());
exports.PutObjectCommand = PutObjectCommand;
//# sourceMappingURL=PutObjectCommand.js.map