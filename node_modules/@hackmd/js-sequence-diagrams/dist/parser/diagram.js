/**
 * js sequence diagrams
 * https://bramp.github.io/js-sequence-diagrams/
 * (c) 2012-2017 Andrew Brampton (bramp.net)
 * Simplified BSD license.
 */
import { ArrowType, LineType, Placement } from './enum';
import * as parser from './grammar';
import { Actor, Note, Signal } from './model';
import { ParseError } from './ParseError';
export class Diagram {
    constructor() {
        this.title = undefined;
        this.actors = [];
        this.signals = [];
    }
    /**
     * Turn "\\n" into "\n"
     * @param s
     */
    static unescape(s) {
        return s.trim().replace(/^"(.*)"$/m, '$1').replace(/\\n/gm, '\n');
    }
    static parse(input) {
        // Create the object to track state and deal with errors
        parser.parser.Diagram = Diagram;
        parser.parser.yy = new Diagram();
        parser.parser.yy.parseError = (message, hash) => {
            throw new ParseError(message, hash);
        };
        // Parse
        const diagram = parser.parse(input);
        // Then clean up the parseError key that a user won't care about
        delete diagram.parseError;
        return diagram;
    }
    /**
     * Return an existing actor with this alias, or creates a new one with alias and name.
     * @param inputAlias
     * @param name
     */
    getActor(inputAlias, name) {
        const alias = inputAlias.trim();
        const actors = this.actors;
        for (const actor of actors) {
            if (actor.alias === alias) {
                return actor;
            }
        }
        const newLen = actors.push(new Actor(alias, (name || alias), actors.length));
        return actors[newLen - 1];
    }
    /**
     * Parses the input as either a alias, or a "name as alias", and returns the corresponding actor.
     * @param input
     */
    getActorWithAlias(input) {
        const s = /([\s\S]+) as (\S+)$/im.exec(input);
        let alias;
        let name;
        if (s) {
            name = s[1].trim();
            alias = s[2].trim();
        }
        else {
            name = alias = input;
        }
        return this.getActor(alias, name);
    }
    setTitle(title) {
        this.title = title;
    }
    addSignal(signal) {
        this.signals.push(signal);
    }
}
Diagram.Actor = Actor;
Diagram.Signal = Signal;
Diagram.Note = Note;
Diagram.LineType = LineType;
Diagram.ArrowType = ArrowType;
Diagram.Placement = Placement;
