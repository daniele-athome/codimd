"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var path = __importStar(require("path"));
var binaryRootPath = path.join(__dirname, '../.pandoc-local');
var defaultPandocOption = {
    pandocBin: path.join(binaryRootPath, 'pandoc'),
    pandocCiteProcBin: path.join(binaryRootPath, 'pandoc-citeproc'),
};
var InputFormat;
(function (InputFormat) {
    InputFormat["commonmark"] = "commonmark";
    InputFormat["creole"] = "creole";
    InputFormat["docbook"] = "docbook";
    InputFormat["docx"] = "docx";
    InputFormat["dokuwiki"] = "dokuwiki";
    InputFormat["epub"] = "epub";
    InputFormat["fb2"] = "fb2";
    InputFormat["gfm"] = "gfm";
    InputFormat["markdown_github"] = "markdown_github";
    InputFormat["haddock"] = "haddock";
    InputFormat["html"] = "html";
    InputFormat["ipynb"] = "ipynb";
    InputFormat["jats"] = "jats";
    InputFormat["json"] = "json";
    InputFormat["latex"] = "latex";
    InputFormat["markdown"] = "markdown";
    InputFormat["markdown_mmd"] = "markdown_mmd";
    InputFormat["markdown_phpextra"] = "markdown_phpextra";
    InputFormat["markdown_strict"] = "markdown_strict";
    InputFormat["mediawiki"] = "mediawiki";
    InputFormat["man"] = "man";
    InputFormat["muse"] = "muse";
    InputFormat["native"] = "native";
    InputFormat["odt"] = "odt";
    InputFormat["opml"] = "opml";
    InputFormat["org"] = "org";
    InputFormat["rst"] = "rst";
    InputFormat["t2t"] = "t2t";
    InputFormat["textile"] = "textile";
    InputFormat["tikiwiki"] = "tikiwiki";
    InputFormat["twiki"] = "twiki";
    InputFormat["vimwiki"] = "vimwiki";
})(InputFormat = exports.InputFormat || (exports.InputFormat = {}));
var OutputFormat;
(function (OutputFormat) {
    OutputFormat["asciidoc"] = "asciidoc";
    OutputFormat["asciidoctor"] = "asciidoctor";
    OutputFormat["beamer"] = "beamer";
    OutputFormat["commonmark"] = "commonmark";
    OutputFormat["context"] = "context";
    OutputFormat["docbook"] = "docbook";
    OutputFormat["docbook4"] = "docbook4";
    OutputFormat["docbook5"] = "docbook5";
    OutputFormat["docx"] = "docx";
    OutputFormat["dokuwiki"] = "dokuwiki";
    OutputFormat["dzslides"] = "dzslides";
    OutputFormat["epub"] = "epub";
    OutputFormat["epub2"] = "epub2";
    OutputFormat["epub3"] = "epub3";
    OutputFormat["fb2"] = "fb2";
    OutputFormat["gfm"] = "gfm";
    OutputFormat["haddock"] = "haddock";
    OutputFormat["html"] = "html";
    OutputFormat["html4"] = "html4";
    OutputFormat["html5"] = "html5";
    OutputFormat["icml"] = "icml";
    OutputFormat["ipynb"] = "ipynb";
    OutputFormat["jats"] = "jats";
    OutputFormat["jira"] = "jira";
    OutputFormat["json"] = "json";
    OutputFormat["latex"] = "latex";
    OutputFormat["man"] = "man";
    OutputFormat["markdown"] = "markdown";
    OutputFormat["markdown_github"] = "markdown_github";
    OutputFormat["markdown_mmd"] = "markdown_mmd";
    OutputFormat["markdown_phpextra"] = "markdown_phpextra";
    OutputFormat["markdown_strict"] = "markdown_strict";
    OutputFormat["mediawiki"] = "mediawiki";
    OutputFormat["ms"] = "ms";
    OutputFormat["muse"] = "muse";
    OutputFormat["native"] = "native";
    OutputFormat["odt"] = "odt";
    OutputFormat["opendocument"] = "opendocument";
    OutputFormat["opml"] = "opml";
    OutputFormat["org"] = "org";
    OutputFormat["plain"] = "plain";
    OutputFormat["pptx"] = "pptx";
    OutputFormat["revealjs"] = "revealjs";
    OutputFormat["rst"] = "rst";
    OutputFormat["rtf"] = "rtf";
    OutputFormat["s5"] = "s5";
    OutputFormat["slideous"] = "slideous";
    OutputFormat["slidy"] = "slidy";
    OutputFormat["tei"] = "tei";
    OutputFormat["texinfo"] = "texinfo";
    OutputFormat["textile"] = "textile";
    OutputFormat["xwiki"] = "xwiki";
    OutputFormat["zimwiki"] = "zimwiki";
})(OutputFormat = exports.OutputFormat || (exports.OutputFormat = {}));
var defaults = function (options, defaultOption) {
    return Object.keys(defaultOption).reduce(function (acc, key) {
        var _a;
        return (__assign({}, acc, (_a = {}, _a[key] = options[key] || defaultOption[key], _a)));
    }, {});
};
var Pandoc = /** @class */ (function () {
    function Pandoc(options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this.stream = function (from, to, args, options) {
            var defaultArgs = ['-f', from, '-t', to];
            // append additional args to end
            var arg = args && args.length > 0 ? defaultArgs.concat(args) : defaultArgs;
            // start pandoc (with or without options)
            if (typeof options !== 'undefined') {
                return child_process_1.spawn(_this.defaultOptions.pandocBin, arg);
            }
            else {
                return child_process_1.spawn(_this.defaultOptions.pandocBin, arg, options);
            }
        };
        this.defaultOptions = defaults(options, defaultPandocOption);
    }
    Pandoc.prototype.promisifyStream = function (stream, cb) {
        if (cb === void 0) { cb = null; }
        return new Promise(function (resolve, reject) {
            var result = '';
            var error = '';
            // listen on error
            stream.on('error', function (err) {
                return reject(err);
            });
            // collect result data
            stream.stdout.on('data', function (data) {
                result += data;
            });
            // collect error data
            stream.stderr.on('data', function (data) {
                error += data;
            });
            // listen on exit
            stream.on('close', function (code) {
                var msg = '';
                if (code !== 0) {
                    msg += 'pandoc exited with code ' + code + (error ? ': ' : '.');
                }
                if (error) {
                    msg += error;
                }
                if (msg) {
                    return reject(new Error(msg));
                }
                resolve(result);
            });
            // do more on stream
            if (cb) {
                cb(stream);
            }
        });
    };
    Pandoc.prototype.convert = function (src, from, to, args, options) {
        var pandoc = this.stream(from, to, args, options);
        return this.promisifyStream(pandoc, function (stream) {
            // finally, send source string
            stream.stdin.end(src, 'utf8');
        });
    };
    Pandoc.prototype.convertFromFile = function (input, to, output, args, options) {
        if (args === void 0) { args = []; }
        return this.promisifyStream(child_process_1.spawn(this.defaultOptions.pandocBin, [
            input,
            '-t', to,
            '-o', output
        ].concat(args), options));
    };
    Pandoc.prototype.convertToFile = function (str, from, to, output, args, options) {
        return this.convert.bind(this)(str, from, to, [
            '-o', output
        ].concat((args || [])), options);
    };
    return Pandoc;
}());
exports.Pandoc = Pandoc;
exports.default = Pandoc;
