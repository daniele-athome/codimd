/// <reference types="node" />
import { SpawnOptionsWithoutStdio, ChildProcessWithoutNullStreams } from 'child_process';
declare type Nullable<T> = {
    [P in keyof T]?: T[P] | null;
};
declare type PandocOptions = {
    pandocBin: string;
    pandocCiteProcBin: string;
};
export declare enum InputFormat {
    commonmark = "commonmark",
    creole = "creole",
    docbook = "docbook",
    docx = "docx",
    dokuwiki = "dokuwiki",
    epub = "epub",
    fb2 = "fb2",
    gfm = "gfm",
    markdown_github = "markdown_github",
    haddock = "haddock",
    html = "html",
    ipynb = "ipynb",
    jats = "jats",
    json = "json",
    latex = "latex",
    markdown = "markdown",
    markdown_mmd = "markdown_mmd",
    markdown_phpextra = "markdown_phpextra",
    markdown_strict = "markdown_strict",
    mediawiki = "mediawiki",
    man = "man",
    muse = "muse",
    native = "native",
    odt = "odt",
    opml = "opml",
    org = "org",
    rst = "rst",
    t2t = "t2t",
    textile = "textile",
    tikiwiki = "tikiwiki",
    twiki = "twiki",
    vimwiki = "vimwiki"
}
export declare enum OutputFormat {
    asciidoc = "asciidoc",
    asciidoctor = "asciidoctor",
    beamer = "beamer",
    commonmark = "commonmark",
    context = "context",
    docbook = "docbook",
    docbook4 = "docbook4",
    docbook5 = "docbook5",
    docx = "docx",
    dokuwiki = "dokuwiki",
    dzslides = "dzslides",
    epub = "epub",
    epub2 = "epub2",
    epub3 = "epub3",
    fb2 = "fb2",
    gfm = "gfm",
    haddock = "haddock",
    html = "html",
    html4 = "html4",
    html5 = "html5",
    icml = "icml",
    ipynb = "ipynb",
    jats = "jats",
    jira = "jira",
    json = "json",
    latex = "latex",
    man = "man",
    markdown = "markdown",
    markdown_github = "markdown_github",
    markdown_mmd = "markdown_mmd",
    markdown_phpextra = "markdown_phpextra",
    markdown_strict = "markdown_strict",
    mediawiki = "mediawiki",
    ms = "ms",
    muse = "muse",
    native = "native",
    odt = "odt",
    opendocument = "opendocument",
    opml = "opml",
    org = "org",
    plain = "plain",
    pptx = "pptx",
    revealjs = "revealjs",
    rst = "rst",
    rtf = "rtf",
    s5 = "s5",
    slideous = "slideous",
    slidy = "slidy",
    tei = "tei",
    texinfo = "texinfo",
    textile = "textile",
    xwiki = "xwiki",
    zimwiki = "zimwiki"
}
declare class Pandoc {
    defaultOptions: PandocOptions;
    constructor(options?: Nullable<PandocOptions>);
    stream: (from: InputFormat, to: OutputFormat, args?: string[], options?: SpawnOptionsWithoutStdio) => ChildProcessWithoutNullStreams;
    promisifyStream(stream: ChildProcessWithoutNullStreams, cb?: any): Promise<string>;
    convert(src: string, from: InputFormat, to: OutputFormat, args?: string[], options?: SpawnOptionsWithoutStdio): Promise<string>;
    convertFromFile(input: string, to: OutputFormat, output: string, args?: string[], options?: SpawnOptionsWithoutStdio): Promise<string>;
    convertToFile(str: string, from: InputFormat, to: OutputFormat, output: string, args?: string[], options?: SpawnOptionsWithoutStdio): any;
}
export { Pandoc };
export default Pandoc;
